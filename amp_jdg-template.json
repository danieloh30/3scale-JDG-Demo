{
  "apiVersion": "v1",
  "base_env": [
    {
      "name": "RAILS_ENV",
      "value": "production"
    },
    {
      "name": "DATABASE_URL",
      "value": "mysql2://root:${MYSQL_ROOT_PASSWORD}@system-mysql/${MYSQL_DATABASE}"
    },
    {
      "name": "FORCE_SSL",
      "value": "true"
    },
    {
      "name": "THREESCALE_SUPERDOMAIN",
      "value": "${WILDCARD_DOMAIN}"
    },
    {
      "name": "TENANT_NAME",
      "value": "${TENANT_NAME}"
    },
    {
      "name": "APICAST_ACCESS_TOKEN",
      "value": "${APICAST_ACCESS_TOKEN}"
    },
    {
      "name": "ADMIN_ACCESS_TOKEN",
      "value": "${ADMIN_ACCESS_TOKEN}"
    },
    {
      "name": "PROVIDER_PLAN",
      "value": "enterprise"
    },
    {
      "name": "USER_LOGIN",
      "value": "${ADMIN_USERNAME}"
    },
    {
      "name": "USER_PASSWORD",
      "value": "${ADMIN_PASSWORD}"
    },
    {
      "name": "RAILS_LOG_TO_STDOUT",
      "value": "true"
    },
    {
      "name": "RAILS_LOG_LEVEL",
      "value": "info"
    },
    {
      "name": "THINKING_SPHINX_ADDRESS",
      "value": "system-sphinx"
    },
    {
      "name": "THINKING_SPHINX_PORT",
      "value": "9306"
    },
    {
      "name": "THINKING_SPHINX_CONFIGURATION_FILE",
      "value": "/tmp/sphinx.conf"
    },
    {
      "name": "EVENTS_SHARED_SECRET",
      "value": "${SYSTEM_BACKEND_SHARED_SECRET}"
    },
    {
      "name": "THREESCALE_SANDBOX_PROXY_OPENSSL_VERIFY_MODE",
      "value": "VERIFY_NONE"
    },
    {
      "name": "APICAST_BACKEND_ROOT_ENDPOINT",
      "value": "https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}"
    },
    {
      "name": "CONFIG_INTERNAL_API_USER",
      "value": "${SYSTEM_BACKEND_USERNAME}"
    },
    {
      "name": "CONFIG_INTERNAL_API_PASSWORD",
      "value": "${SYSTEM_BACKEND_PASSWORD}"
    },
    {
      "name": "SECRET_KEY_BASE",
      "value": "${SYSTEM_APP_SECRET_KEY_BASE}"
    },
    {
      "name": "AMP_RELEASE",
      "value": "${AMP_RELEASE}"
    },
    {
      "name": "SMTP_ADDRESS",
      "valueFrom": {
        "configMapKeyRef": {
          "key": "address",
          "name": "smtp"
        }
      }
    },
    {
      "name": "SMTP_USER_NAME",
      "valueFrom": {
        "configMapKeyRef": {
          "key": "username",
          "name": "smtp"
        }
      }
    },
    {
      "name": "SMTP_PASSWORD",
      "valueFrom": {
        "configMapKeyRef": {
          "key": "password",
          "name": "smtp"
        }
      }
    },
    {
      "name": "SMTP_DOMAIN",
      "valueFrom": {
        "configMapKeyRef": {
          "key": "domain",
          "name": "smtp"
        }
      }
    },
    {
      "name": "SMTP_PORT",
      "valueFrom": {
        "configMapKeyRef": {
          "key": "port",
          "name": "smtp"
        }
      }
    },
    {
      "name": "SMTP_AUTHENTICATION",
      "valueFrom": {
        "configMapKeyRef": {
          "key": "authentication",
          "name": "smtp"
        }
      }
    },
    {
      "name": "SMTP_OPENSSL_VERIFY_MODE",
      "valueFrom": {
        "configMapKeyRef": {
          "key": "openssl.verify.mode",
          "name": "smtp"
        }
      }
    },
    {
      "name": "BACKEND_ROUTE",
      "value": "https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}"
    }

],
  "kind": "Template",
  "message": "Login on https://${TENANT_NAME}-admin.${WILDCARD_DOMAIN} as ${ADMIN_USERNAME}/${ADMIN_PASSWORD}",
  "metadata": {
    "name": "threescale-amp-jdg"
  },
  "objects": [
 {
            "kind": "Service",
            "apiVersion": "v1",
            "spec": {
                "ports": [
                    {
                        "port": 8080,
                        "targetPort": 8080
                    }
                ],
                "selector": {
                    "deploymentConfig": "${APPLICATION_NAME}"
                }
            },
            "metadata": {
                "name": "${APPLICATION_NAME}",
                "labels": {
                    "application": "${APPLICATION_NAME}"
                },
                "annotations": {
                    "description": "The web server's HTTP port."
                }
            }
        },
        {
            "kind": "Service",
            "apiVersion": "v1",
            "spec": {
                "ports": [
                    {
                        "port": 11211,
                        "targetPort": 11211
                    }
                ],
                "selector": {
                    "deploymentConfig": "${APPLICATION_NAME}"
                }
            },
            "metadata": {
                "name": "${APPLICATION_NAME}-memcached",
                "labels": {
                    "application": "${APPLICATION_NAME}"
                },
                "annotations": {
                    "description": "Memcached service for clustered applications."
                }
            }
        },
        {
            "kind": "Service",
            "apiVersion": "v1",
            "spec": {
                "ports": [
                    {
                        "port": 11333,
                        "targetPort": 11333
                    }
                ],
                "selector": {
                    "deploymentConfig": "${APPLICATION_NAME}"
                }
            },
            "metadata": {
                "name": "${APPLICATION_NAME}-hotrod",
                "labels": {
                    "application": "${APPLICATION_NAME}"
                },
                "annotations": {
                    "description": "Hot Rod service for clustered applications."
                }
            }
        },
        {
            "kind": "Service",
            "apiVersion": "v1",
            "spec": {
                "clusterIP": "None",
                "ports": [
                    {
                        "name": "ping",
                        "port": 8888
                    }
                ],
                "selector": {
                    "deploymentConfig": "${APPLICATION_NAME}"
                }
            },
            "metadata": {
                "name": "${APPLICATION_NAME}-ping",
                "labels": {
                    "application": "${APPLICATION_NAME}"
                },
                "annotations": {
                    "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true",
                    "description": "The JGroups ping port for clustering."
                }
            }
        },
        {
            "kind": "Route",
            "apiVersion": "v1",
            "id": "${APPLICATION_NAME}-http",
            "metadata": {
                "name": "${APPLICATION_NAME}",
                "labels": {
                    "application": "${APPLICATION_NAME}"
                },
                "annotations": {
                    "description": "Route for application's HTTP service."
                }
            },
            "spec": {
                "host": "${HOSTNAME_HTTP}",
                "to": {
                    "name": "${APPLICATION_NAME}"
                }
            }
        },
        {
            "kind": "DeploymentConfig",
            "apiVersion": "v1",
            "metadata": {
                "name": "${APPLICATION_NAME}",
                "labels": {
                    "application": "${APPLICATION_NAME}"
                }
            },
            "spec": {
                "strategy": {
                    "type": "Recreate"
                },
                "triggers": [
                    {
                        "type": "ImageChange",
                        "imageChangeParams": {
                            "automatic": true,
                            "containerNames": [
                                "${APPLICATION_NAME}"
                            ],
                            "from": {
                                "kind": "ImageStreamTag",
                                "namespace": "${IMAGE_STREAM_NAMESPACE}",
                                "name": "jboss-datagrid71-openshift:1.3"
                            }
                        }
                    },
                    {
                        "type": "ConfigChange"
                    }
                ],
                "replicas": 1,
                "selector": {
                    "deploymentConfig": "${APPLICATION_NAME}"
                },
                "template": {
                    "metadata": {
                        "name": "${APPLICATION_NAME}",
                        "labels": {
                            "deploymentConfig": "${APPLICATION_NAME}",
                            "application": "${APPLICATION_NAME}"
                        }
                    },
                    "spec": {
                        "terminationGracePeriodSeconds": 60,
                        "containers": [
                            {
                                "name": "${APPLICATION_NAME}",
                                "image": "jboss-datagrid71-openshift",
                                "imagePullPolicy": "Always",
                                "resources": {
                                    "limits": {
                                        "memory": "1Gi"
                                    }
                                },
                                "livenessProbe": {
                                    "exec": {
                                        "command": [
                                            "/bin/bash",
                                            "-c",
                                            "/opt/datagrid/bin/livenessProbe.sh"
                                        ]
                                    },
                                    "initialDelaySeconds": 60
                                },
                                "readinessProbe": {
                                    "exec": {
                                        "command": [
                                            "/bin/bash",
                                            "-c",
                                            "/opt/datagrid/bin/readinessProbe.sh"
                                        ]
                                    }
                                },
                                "ports": [
                                    {
                                        "name": "jolokia",
                                        "containerPort": 8778,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "name": "http",
                                        "containerPort": 8080,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "name": "ping",
                                        "containerPort": 8888,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "name": "memcached",
                                        "containerPort": 11211,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "name": "hotrod-internal",
                                        "containerPort": 11222,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "name": "hotrod",
                                        "containerPort": 11333,
                                        "protocol": "TCP"
                                    }
                                ],
                                "env": [
                                    {
                                        "name": "USERNAME",
                                        "value": "admin"
                                    },
                                    {
                                        "name": "PASSWORD",
                                        "value": ""
                                    },
                                    {
                                        "name": "ADMIN_GROUP",
                                        "value": ""
                                    },
                                    {
                                        "name": "HOTROD_AUTHENTICATION",
                                        "value": ""
                                    },
                                    {
                                        "name": "CONTAINER_SECURITY_ROLE_MAPPER",
                                        "value": ""
                                    },
                                    {
                                        "name": "CONTAINER_SECURITY_ROLES",
                                        "value": ""
                                    },
                                    {
                                        "name": "JGROUPS_PING_PROTOCOL",
                                        "value": "openshift.DNS_PING"
                                    },
                                    {
                                        "name": "OPENSHIFT_DNS_PING_SERVICE_NAME",
                                        "value": "${APPLICATION_NAME}-ping"
                                    },
                                    {
                                        "name": "OPENSHIFT_DNS_PING_SERVICE_PORT",
                                        "value": "8888"
                                    },
                                    {
                                        "name": "INFINISPAN_CONNECTORS",
                                        "value": "rest"
                                    },
                                    {
                                        "name": "CACHE_NAMES",
                                        "value": ""
                                    },
                                    {
                                        "name": "DATAVIRT_CACHE_NAMES",
                                        "value": ""
                                    },
                                    {
                                        "name": "CACHE_TYPE_DEFAULT",
                                        "value": ""
                                    },
                                    {
                                        "name": "ENCRYPTION_REQUIRE_SSL_CLIENT_AUTH",
                                        "value": ""
                                    },
                                    {
                                        "name": "REST_SECURITY_DOMAIN",
                                        "value": ""
                                    },
                                    {
                                        "name": "JGROUPS_CLUSTER_PASSWORD",
                                        "value": "${JGROUPS_CLUSTER_PASSWORD}"
                                    }
                                ]
                            }
                        ]
                    }
                }
            }
        },
    {
      "apiVersion": "v1",
      "kind": "PersistentVolumeClaim",
      "metadata": {
        "name": "system-storage"
      },
      "spec": {
        "accessModes": [
          "ReadWriteMany"
        ],
        "resources": {
          "requests": {
            "storage": "100Mi"
          }
        }
      }
    },
    {
      "apiVersion": "v1",
      "kind": "PersistentVolumeClaim",
      "metadata": {
        "name": "mysql-storage"
      },
      "spec": {
        "accessModes": [
          "ReadWriteOnce"
        ],
        "resources": {
          "requests": {
            "storage": "1Gi"
          }
        }
      }
    },
    {
      "apiVersion": "v1",
      "kind": "PersistentVolumeClaim",
      "metadata": {
        "name": "system-redis-storage"
      },
      "spec": {
        "accessModes": [
          "ReadWriteOnce"
        ],
        "resources": {
          "requests": {
            "storage": "1Gi"
          }
        }
      }
    },
    {
      "apiVersion": "v1",
      "kind": "PersistentVolumeClaim",
      "metadata": {
        "name": "backend-redis-storage"
      },
      "spec": {
        "accessModes": [
          "ReadWriteOnce"
        ],
        "resources": {
          "requests": {
            "storage": "1Gi"
          }
        }
      }
    },
    {
      "apiVersion": "v1",
      "kind": "DeploymentConfig",
      "metadata": {
        "name": "backend-cron"
      },
      "spec": {
        "replicas": 1,
        "selector": {
          "name": "backend-cron"
        },
        "strategy": {
          "rollingParams": {
            "intervalSeconds": 1,
            "maxSurge": "25%",
            "maxUnavailable": "25%",
            "timeoutSeconds": 600,
            "updatePeriodSeconds": 1
          },
          "type": "Rolling"
        },
        "template": {
          "metadata": {
            "labels": {
              "name": "backend-cron"
            }
          },
          "spec": {
            "containers": [
              {
                "args": [
                  "backend-cron"
                ],
                "env": [
                  {
                    "name": "CONFIG_REDIS_PROXY",
                    "value": "backend-redis:6379"
                  },
                  {
                    "name": "CONFIG_QUEUES_MASTER_NAME",
                    "value": "backend-redis:6379/1"
                  },
                  {
                    "name": "RACK_ENV",
                    "value": "production"
                  }
                ],
                "image": "registry.access.redhat.com/3scale-amp20/backend:1.0-2",
                "imagePullPolicy": "IfNotPresent",
                "name": "backend-cron"
              }
            ]
          }
        },
        "triggers": [
          {
            "type": "ConfigChange"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "DeploymentConfig",
      "metadata": {
        "name": "backend-redis"
      },
      "spec": {
        "replicas": 1,
        "selector": {
          "name": "backend-redis"
        },
        "strategy": {
          "type": "Recreate"
        },
        "template": {
          "metadata": {
            "labels": {
              "name": "backend-redis"
            }
          },
          "spec": {
            "containers": [
              {
                "image": "${REDIS_IMAGE}",
                "imagePullPolicy": "IfNotPresent",
                "livenessProbe": {
                  "initialDelaySeconds": 10,
                  "periodSeconds": 10,
                  "tcpSocket": {
                    "port": 6379
                  }
                },
                "name": "backend-redis",
                "readinessProbe": {
                  "exec": {
                    "command": [
                      "container-entrypoint",
                      "bash",
                      "-c",
                      "redis-cli set liveness-probe \"`date`\" | grep OK"
                    ]
                  },
                  "initialDelaySeconds": 10,
                  "periodSeconds": 30,
                  "timeoutSeconds": 1
                },
                "volumeMounts": [
                  {
                    "mountPath": "/var/lib/redis/data",
                    "name": "backend-redis-storage"
                  },
                  {
                    "mountPath": "/etc/redis.conf",
                    "name": "redis-config",
                    "subPath": "redis.conf"
                  }
                ]
              }
            ],
            "volumes": [
              {
                "name": "backend-redis-storage",
                "persistentVolumeClaim": {
                  "claimName": "backend-redis-storage"
                }
              },
              {
                "configMap": {
                  "items": [
                    {
                      "key": "redis.conf",
                      "path": "redis.conf"
                    }
                  ],
                  "name": "redis-config"
                },
                "name": "redis-config"
              }
            ]
          }
        },
        "triggers": [
          {
            "type": "ConfigChange"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "DeploymentConfig",
      "metadata": {
        "name": "backend-listener"
      },
      "spec": {
        "replicas": 1,
        "selector": {
          "name": "backend-listener"
        },
        "strategy": {
          "rollingParams": {
            "intervalSeconds": 1,
            "maxSurge": "25%",
            "maxUnavailable": "25%",
            "timeoutSeconds": 600,
            "updatePeriodSeconds": 1
          },
          "type": "Rolling"
        },
        "template": {
          "metadata": {
            "labels": {
              "name": "backend-listener"
            }
          },
          "spec": {
            "containers": [
              {
                "args": [
                  "3scale_backend",
                  "start",
                  "-e",
                  "production",
                  "-p",
                  "3000",
                  "-x",
                  "/dev/stdout"
                ],
                "env": [
                  {
                    "name": "CONFIG_REDIS_PROXY",
                    "value": "backend-redis:6379"
                  },
                  {
                    "name": "CONFIG_QUEUES_MASTER_NAME",
                    "value": "backend-redis:6379/1"
                  },
                  {
                    "name": "RACK_ENV",
                    "value": "production"
                  },
                  {
                    "name": "CONFIG_INTERNAL_API_USER",
                    "value": "${SYSTEM_BACKEND_USERNAME}"
                  },
                  {
                    "name": "CONFIG_INTERNAL_API_PASSWORD",
                    "value": "${SYSTEM_BACKEND_PASSWORD}"
                  }
                ],
                "image": "registry.access.redhat.com/3scale-amp20/backend:1.0-2",
                "imagePullPolicy": "IfNotPresent",
                "livenessProbe": {
                  "initialDelaySeconds": 30,
                  "periodSeconds": 10,
                  "tcpSocket": {
                    "port": 3000
                  }
                },
                "name": "backend-listener",
                "ports": [
                  {
                    "containerPort": 3000,
                    "protocol": "TCP"
                  }
                ],
                "readinessProbe": {
                  "httpGet": {
                    "path": "/status",
                    "port": 3000
                  },
                  "initialDelaySeconds": 30,
                  "timeoutSeconds": 5
                }
              }
            ]
          }
        },
        "triggers": [
          {
            "type": "ConfigChange"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "Service",
      "metadata": {
        "name": "backend-redis"
      },
      "spec": {
        "ports": [
          {
            "port": 6379,
            "protocol": "TCP",
            "targetPort": 6379
          }
        ],
        "selector": {
          "name": "backend-redis"
        }
      }
    },
    {
      "apiVersion": "v1",
      "kind": "Service",
      "metadata": {
        "name": "backend-listener"
      },
      "spec": {
        "ports": [
          {
            "name": "http",
            "port": 3000,
            "protocol": "TCP",
            "targetPort": 3000
          }
        ],
        "selector": {
          "name": "backend-listener"
        }
      }
    },
    {
      "apiVersion": "v1",
      "kind": "Service",
      "metadata": {
        "name": "system-provider"
      },
      "spec": {
        "ports": [
          {
            "name": "http",
            "port": 3000,
            "protocol": "TCP",
            "targetPort": "provider"
          }
        ],
        "selector": {
          "name": "system-app"
        }
      }
    },
    {
      "apiVersion": "v1",
      "kind": "Service",
      "metadata": {
        "name": "system-developer"
      },
      "spec": {
        "ports": [
          {
            "name": "http",
            "port": 3000,
            "protocol": "TCP",
            "targetPort": "developer"
          }
        ],
        "selector": {
          "name": "system-app"
        }
      }
    },
    {
      "apiVersion": "v1",
      "kind": "DeploymentConfig",
      "metadata": {
        "name": "backend-worker"
      },
      "spec": {
        "replicas": 1,
        "selector": {
          "name": "backend-worker"
        },
        "strategy": {
          "rollingParams": {
            "intervalSeconds": 1,
            "maxSurge": "25%",
            "maxUnavailable": "25%",
            "timeoutSeconds": 600,
            "updatePeriodSeconds": 1
          },
          "type": "Rolling"
        },
        "template": {
          "metadata": {
            "labels": {
              "name": "backend-worker"
            }
          },
          "spec": {
            "containers": [
              {
                "args": [
                  "3scale_backend_worker",
                  "run"
                ],
                "env": [
                  {
                    "name": "CONFIG_REDIS_PROXY",
                    "value": "backend-redis:6379"
                  },
                  {
                    "name": "CONFIG_QUEUES_MASTER_NAME",
                    "value": "backend-redis:6379/1"
                  },
                  {
                    "name": "RACK_ENV",
                    "value": "production"
                  },
                  {
                    "name": "CONFIG_EVENTS_HOOK",
                    "value": "http://system-provider:3000/master/events/import"
                  },
                  {
                    "name": "CONFIG_EVENTS_HOOK_SHARED_SECRET",
                    "value": "${SYSTEM_BACKEND_SHARED_SECRET}"
                  }
                ],
                "image": "registry.access.redhat.com/3scale-amp20/backend:1.0-2",
                "imagePullPolicy": "IfNotPresent",
                "name": "backend-worker"
              }
            ]
          }
        },
        "triggers": [
          {
            "type": "ConfigChange"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "Service",
      "metadata": {
        "name": "system-mysql"
      },
      "spec": {
        "ports": [
          {
            "name": "system-mysql",
            "nodePort": 0,
            "port": 3306,
            "protocol": "TCP",
            "targetPort": 3306
          }
        ],
        "selector": {
          "name": "system-mysql"
        }
      }
    },
    {
      "apiVersion": "v1",
      "kind": "Service",
      "metadata": {
        "name": "system-redis"
      },
      "spec": {
        "ports": [
          {
            "name": "redis",
            "port": 6379,
            "protocol": "TCP",
            "targetPort": 6379
          }
        ],
        "selector": {
          "name": "system-redis"
        }
      }
    },
    {
      "apiVersion": "v1",
      "kind": "DeploymentConfig",
      "metadata": {
        "name": "system-redis"
      },
      "spec": {
        "replicas": 1,
        "selector": {
          "name": "system-redis"
        },
        "strategy": {
          "type": "Recreate"
        },
        "template": {
          "metadata": {
            "labels": {
              "name": "system-redis"
            }
          },
          "spec": {
            "containers": [
              {
                "args": null,
                "image": "${REDIS_IMAGE}",
                "imagePullPolicy": "IfNotPresent",
                "livenessProbe": {
                  "initialDelaySeconds": 10,
                  "periodSeconds": 5,
                  "tcpSocket": {
                    "port": 6379
                  }
                },
                "name": "system-redis",
                "readinessProbe": {
                  "exec": {
                    "command": [
                      "container-entrypoint",
                      "bash",
                      "-c",
                      "redis-cli set liveness-probe \"`date`\" | grep OK"
                    ]
                  },
                  "initialDelaySeconds": 30,
                  "periodSeconds": 10,
                  "timeoutSeconds": 5
                },
                "terminationMessagePath": "/dev/termination-log",
                "volumeMounts": [
                  {
                    "mountPath": "/var/lib/redis/data",
                    "name": "system-redis-storage"
                  },
                  {
                    "mountPath": "/etc/redis.conf",
                    "name": "redis-config",
                    "subPath": "redis.conf"
                  }
                ]
              }
            ],
            "volumes": [
              {
                "name": "system-redis-storage",
                "persistentVolumeClaim": {
                  "claimName": "system-redis-storage"
                }
              },
              {
                "configMap": {
                  "items": [
                    {
                      "key": "redis.conf",
                      "path": "redis.conf"
                    }
                  ],
                  "name": "redis-config"
                },
                "name": "redis-config"
              }
            ]
          }
        },
        "triggers": [
          {
            "type": "ConfigChange"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "Service",
      "metadata": {
        "name": "system-sphinx"
      },
      "spec": {
        "ports": [
          {
            "name": "sphinx",
            "port": 9306,
            "protocol": "TCP",
            "targetPort": 9306
          }
        ],
        "selector": {
          "name": "system-sphinx"
        }
      }
    },
    {
      "apiVersion": "v1",
      "kind": "DeploymentConfig",
      "metadata": {
        "name": "system-sphinx"
      },
      "spec": {
        "replicas": 1,
        "selector": {
          "name": "system-sphinx"
        },
        "strategy": {
          "rollingParams": {
            "intervalSeconds": 1,
            "maxSurge": "25%",
            "maxUnavailable": "25%",
            "timeoutSeconds": 600,
            "updatePeriodSeconds": 1
          },
          "type": "Rolling"
        },
        "template": {
          "metadata": {
            "labels": {
              "name": "system-sphinx"
            }
          },
          "spec": {
            "containers": [
              {
                "args": [
                  "rake",
                  "openshift:thinking_sphinx:start"
                ],
                "env": [
                  {
                    "name": "RAILS_ENV",
                    "value": "production"
                  },
                  {
                    "name": "DATABASE_URL",
                    "value": "mysql2://root:${MYSQL_ROOT_PASSWORD}@system-mysql/${MYSQL_DATABASE}"
                  },
                  {
                    "name": "THINKING_SPHINX_ADDRESS",
                    "value": "0.0.0.0"
                  },
                  {
                    "name": "THINKING_SPHINX_CONFIGURATION_FILE",
                    "value": "db/sphinx/production.conf"
                  },
                  {
                    "name": "THINKING_SPHINX_PID_FILE",
                    "value": "db/sphinx/searchd.pid"
                  },
                  {
                    "name": "DELTA_INDEX_INTERVAL",
                    "value": "5"
                  },
                  {
                    "name": "FULL_REINDEX_INTERVAL",
                    "value": "60"
                  }
                ],
                "image": "registry.access.redhat.com/3scale-amp20/system:1.0-2",
                "imagePullPolicy": "IfNotPresent",
                "livenessProbe": {
                  "initialDelaySeconds": 60,
                  "periodSeconds": 10,
                  "tcpSocket": {
                    "port": 9306
                  }
                },
                "name": "system-sphinx",
                "volumeMounts": [
                  {
                    "mountPath": "/opt/system/db/sphinx",
                    "name": "system-sphinx-database"
                  }
                ]
              }
            ],
            "volumes": [
              {
                "emptyDir": {
                },
                "name": "system-sphinx-database"
              }
            ]
          }
        },
        "triggers": [
          {
            "type": "ConfigChange"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "Service",
      "metadata": {
        "name": "system-memcache"
      },
      "spec": {
        "ports": [
          {
            "name": "memcache",
            "port": 11211,
            "protocol": "TCP",
            "targetPort": 11211
          }
        ],
        "selector": {
          "name": "system-memcache"
        }
      }
    },
    {
      "apiVersion": "v1",
      "kind": "DeploymentConfig",
      "metadata": {
        "name": "system-memcache"
      },
      "spec": {
        "replicas": 1,
        "selector": {
          "name": "system-memcache"
        },
        "strategy": {
          "rollingParams": {
            "intervalSeconds": 1,
            "maxSurge": "25%",
            "maxUnavailable": "25%",
            "timeoutSeconds": 600,
            "updatePeriodSeconds": 1
          },
          "type": "Rolling"
        },
        "template": {
          "metadata": {
            "labels": {
              "name": "system-memcache"
            }
          },
          "spec": {
            "containers": [
              {
                "args": null,
                "command": [
                  "memcached",
                  "-m",
                  "64"
                ],
                "env": null,
                "image": "registry.access.redhat.com/3scale-amp20/memcached:1.4.15-7",
                "imagePullPolicy": "IfNotPresent",
                "livenessProbe": {
                  "initialDelaySeconds": 10,
                  "periodSeconds": 10,
                  "tcpSocket": {
                    "port": 11211
                  }
                },
                "name": "memcache",
                "readinessProbe": {
                  "exec": {
                    "command": [
                      "sh",
                      "-c",
                      "echo version | nc $HOSTNAME 11211 | grep VERSION"
                    ]
                  },
                  "initialDelaySeconds": 10,
                  "periodSeconds": 30,
                  "timeoutSeconds": 5
                }
              }
            ],
            "ports": [
              {
                "containerPort": 6379,
                "protocol": "TCP"
              }
            ]
          }
        },
        "triggers": [
          {
            "type": "ConfigChange"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "Route",
      "metadata": {
        "labels": {
          "app": "system-route"
        },
        "name": "system-provider-admin-route"
      },
      "spec": {
        "host": "${TENANT_NAME}-admin.${WILDCARD_DOMAIN}",
        "port": {
          "targetPort": "http"
        },
        "tls": {
          "insecureEdgeTerminationPolicy": "Allow",
          "termination": "edge"
        },
        "to": {
          "kind": "Service",
          "name": "system-provider"
        }
      }
    },
    {
      "apiVersion": "v1",
      "kind": "Route",
      "metadata": {
        "labels": {
          "app": "system-route"
        },
        "name": "backend-route"
      },
      "spec": {
        "host": "backend-${TENANT_NAME}.${WILDCARD_DOMAIN}",
        "port": {
          "targetPort": "http"
        },
        "tls": {
          "insecureEdgeTerminationPolicy": "Allow",
          "termination": "edge"
        },
        "to": {
          "kind": "Service",
          "name": "backend-listener"
        }
      }
    },
    {
      "apiVersion": "v1",
      "kind": "Route",
      "metadata": {
        "labels": {
          "app": "system-route"
        },
        "name": "system-developer-route"
      },
      "spec": {
        "host": "${TENANT_NAME}.${WILDCARD_DOMAIN}",
        "port": {
          "targetPort": "http"
        },
        "tls": {
          "insecureEdgeTerminationPolicy": "Allow",
          "termination": "edge"
        },
        "to": {
          "kind": "Service",
          "name": "system-developer"
        }
      }
    },
    {
      "apiVersion": "v1",
      "kind": "DeploymentConfig",
      "metadata": {
        "name": "apicast-staging"
      },
      "spec": {
        "replicas": 1,
        "selector": {
          "deploymentconfig": "apicast-staging"
        },
        "strategy": {
          "rollingParams": {
            "intervalSeconds": 1,
            "maxSurge": "25%",
            "maxUnavailable": "25%",
            "timeoutSeconds": 1800,
            "updatePeriodSeconds": 1
          },
          "type": "Rolling"
        },
        "template": {
          "metadata": {
            "labels": {
              "deploymentconfig": "apicast-staging"
            }
          },
          "spec": {
            "containers": [
              {
                "env": [
                  {
                    "name": "THREESCALE_PORTAL_ENDPOINT",
                    "value": "http://${APICAST_ACCESS_TOKEN}@system-provider:3000"
                  },
                  {
                    "name": "APICAST_CONFIGURATION_LOADER",
                    "value": "lazy"
                  },
                  {
                    "name": "APICAST_CONFIGURATION_CACHE",
                    "value": "0"
                  },
                  {
                    "name": "THREESCALE_DEPLOYMENT_ENV",
                    "value": "sandbox"
                  },
                  {
                    "name": "APICAST_MANAGEMENT_API",
                    "value": "${APICAST_MANAGEMENT_API}"
                  },
                  {
                    "name": "BACKEND_ENDPOINT_OVERRIDE",
                    "value": "http://backend-listener:3000"
                  },
                  {
                    "name": "OPENSSL_VERIFY",
                    "value": "${APICAST_OPENSSL_VERIFY}"
                  },
                  {
                    "name": "APICAST_RESPONSE_CODES",
                    "value": "${APICAST_RESPONSE_CODES}"
                  },
                  {
                    "name": "REDIS_URL",
                    "value": "redis://system-redis:6379/2"
                  },
                  {
                    "name": "APICAST_MODULE",
                    "value": "jdg.apicast_jdg"
                  },
		    {
			"name": "APICAST_JDG_URL",
			"value": "${APPLICATION_NAME}:8080"
		    }

                ],
                "image": "registry.access.redhat.com/3scale-amp20/apicast-gateway:1.0-3",
                "imagePullPolicy": "IfNotPresent",
                "livenessProbe": {
                  "httpGet": {
                    "path": "/status/live",
                    "port": 8090
                  },
                  "initialDelaySeconds": 10,
                  "periodSeconds": 10,
                  "timeoutSeconds": 5
                },
                "name": "apicast-staging",
                "ports": [
                  {
                    "containerPort": 8080,
                    "protocol": "TCP"
                  },
                  {
                    "containerPort": 8090,
                    "protocol": "TCP"
                  }
                ],
                "readinessProbe": {
                  "httpGet": {
                    "path": "/status/ready",
                    "port": 8090
                  },
                  "initialDelaySeconds": 15,
                  "periodSeconds": 30,
                  "timeoutSeconds": 5
                },
                "volumeMounts": [
                  {
                    "mountPath": "/opt/app-root/src/src/cors/",
                    "name": "apicast-cors",
                    "readOnly": true
                  },
		  {
                    "mountPath": "/opt/app-root/src/src/jdg/",
                    "name": "apicast-jdg",
                    "readOnly": true
                  },
                  {
                    "mountPath": "/opt/app-root/src/apicast.d/",
                    "name": "cors-conf",
                    "readOnly": true
                  }
                ]
              }
            ],
            "volumes": [
		{
                "configMap": {
                  "items": [
                    {
                      "key": "apicast_jdg.lua",
                      "path": "apicast_jdg.lua"
                    }
                  ],
                  "name": "apicast-jdg"
                },
                "name": "apicast-jdg"
              },
              {
                "configMap": {
                  "items": [
                    {
                      "key": "apicast_cors.lua",
                      "path": "apicast_cors.lua"
                    }
                  ],
                  "name": "apicast-cors"
                },
                "name": "apicast-cors"
              },
              {
                "configMap": {
                  "items": [
                    {
                      "key": "cors.conf",
                      "path": "cors.conf"
                    }
                  ],
                  "name": "cors-conf"
                },
                "name": "cors-conf"
              }
            ]
          }
        },
        "triggers": [
          {
            "type": "ConfigChange"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "Service",
      "metadata": {
        "name": "apicast-staging"
      },
      "spec": {
        "ports": [
          {
            "name": "gateway",
            "port": 8080,
            "protocol": "TCP",
            "targetPort": 8080
          },
          {
            "name": "management",
            "port": 8090,
            "protocol": "TCP",
            "targetPort": 8090
          }
        ],
        "selector": {
          "deploymentconfig": "apicast-staging"
        }
      }
    },
    {
      "apiVersion": "v1",
      "kind": "DeploymentConfig",
      "metadata": {
        "name": "apicast-production"
      },
      "spec": {
        "replicas": 1,
        "selector": {
          "deploymentconfig": "apicast-production"
        },
        "strategy": {
          "rollingParams": {
            "intervalSeconds": 1,
            "maxSurge": "25%",
            "maxUnavailable": "25%",
            "timeoutSeconds": 1800,
            "updatePeriodSeconds": 1
          },
          "type": "Rolling"
        },
        "template": {
          "metadata": {
            "labels": {
              "deploymentconfig": "apicast-production"
            }
          },
          "spec": {
            "containers": [
              {
                "env": [
                  {
                    "name": "THREESCALE_PORTAL_ENDPOINT",
                    "value": "http://${APICAST_ACCESS_TOKEN}@system-provider:3000"
                  },
                  {
                    "name": "APICAST_CONFIGURATION_LOADER",
                    "value": "boot"
                  },
                  {
                    "name": "APICAST_CONFIGURATION_CACHE",
                    "value": "60"
                  },
                  {
                    "name": "THREESCALE_DEPLOYMENT_ENV",
                    "value": "production"
                  },
                  {
                    "name": "APICAST_MANAGEMENT_API",
                    "value": "${APICAST_MANAGEMENT_API}"
                  },
                  {
                    "name": "BACKEND_ENDPOINT_OVERRIDE",
                    "value": "http://backend-listener:3000"
                  },
                  {
                    "name": "OPENSSL_VERIFY",
                    "value": "${APICAST_OPENSSL_VERIFY}"
                  },
                  {
                    "name": "APICAST_RESPONSE_CODES",
                    "value": "${APICAST_RESPONSE_CODES}"
                  },
                  {
                    "name": "REDIS_URL",
                    "value": "redis://system-redis:6379/1"
                  },
                  {
                    "name": "APICAST_MODULE",
                    "value": "jdg.apicast_jdg"
                  },
		    {
			"name": "APICAST_JDG_URL",
			"value": "${APPLICATION_NAME}:8080"
		    }
                ],
                "image": "registry.access.redhat.com/3scale-amp20/apicast-gateway:1.0-3",
                "imagePullPolicy": "IfNotPresent",
                "livenessProbe": {
                  "httpGet": {
                    "path": "/status/live",
                    "port": 8090
                  },
                  "initialDelaySeconds": 10,
                  "periodSeconds": 10,
                  "timeoutSeconds": 5
                },
                "name": "apicast-production",
                "ports": [
                  {
                    "containerPort": 8080,
                    "protocol": "TCP"
                  },
                  {
                    "containerPort": 8090,
                    "protocol": "TCP"
                  }
                ],
                "readinessProbe": {
                  "httpGet": {
                    "path": "/status/ready",
                    "port": 8090
                  },
                  "initialDelaySeconds": 15,
                  "periodSeconds": 30,
                  "timeoutSeconds": 5
                },
                "volumeMounts": [
                  {
                    "mountPath": "/opt/app-root/src/src/cors/",
                    "name": "apicast-cors",
                    "readOnly": true
                  },
                  {
                    "mountPath": "/opt/app-root/src/apicast.d/",
                    "name": "cors-conf",
                    "readOnly": true
                  },
		  {
                    "mountPath": "/opt/app-root/src/src/jdg/",
                    "name": "apicast-jdg",
                    "readOnly": true
                  }
                ]
              }
            ],
            "volumes": [
{
                "configMap": {
                  "items": [
                    {
                      "key": "apicast_jdg.lua",
                      "path": "apicast_jdg.lua"
                    }
                  ],
                  "name": "apicast-jdg"
                },
                "name": "apicast-jdg"
              },
              {
                "configMap": {
                  "items": [
                    {
                      "key": "apicast_cors.lua",
                      "path": "apicast_cors.lua"
                    }
                  ],
                  "name": "apicast-cors"
                },
                "name": "apicast-cors"
              },
              {
                "configMap": {
                  "items": [
                    {
                      "key": "cors.conf",
                      "path": "cors.conf"
                    }
                  ],
                  "name": "cors-conf"
                },
                "name": "cors-conf"
              }
            ]
          }
        },
        "triggers": [
          {
            "type": "ConfigChange"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "Service",
      "metadata": {
        "name": "apicast-production"
      },
      "spec": {
        "ports": [
          {
            "name": "gateway",
            "port": 8080,
            "protocol": "TCP",
            "targetPort": 8080
          },
          {
            "name": "management",
            "port": 8090,
            "protocol": "TCP",
            "targetPort": 8090
          }
        ],
        "selector": {
          "deploymentconfig": "apicast-production"
        }
      }
    },
    {
      "apiVersion": "v1",
      "data": {
        "apicast_cors.lua": "local apicast = require('apicast').new()\nlocal _M = { _VERSION = '3.0.0', _NAME = 'APIcast with CORS' }\nlocal mt = { __index = setmetatable(_M, { __index = apicast }) }\n\nfunction _M.new()\n  return setmetatable({}, mt)\nend\n\nlocal function set_cors_headers()\n ngx.header['Access-Control-Allow-Headers'] = ngx.var.http_access_control_request_headers\n ngx.header['Access-Control-Allow-Methods'] = ngx.var.http_access_control_request_method\n ngx.header['Access-Control-Allow-Origin'] = ngx.var.http_origin\n ngx.header['Access-Control-Allow-Credentials'] = 'true'\nend\n\n local function cors_preflight_response()\n  local cors_preflight = ngx.var.request_method == 'OPTIONS' and ngx.var.http_origin and ngx.var.http_access_control_request_method\n  -- for CORS preflight sent by the browser, return a 204 status code\n   if cors_preflight then\n     set_cors_headers()\n     ngx.status = 204\n     return ngx.exit(ngx.status)\n   end\n end\n function _M:rewrite()\n   cors_preflight_response()\n   return apicast:rewrite()\n  end\n return _M"
      },
      "kind": "ConfigMap",
      "metadata": {
        "name": "apicast-cors"
      }
    },
    {
      "apiVersion": "v1",
      "data": {
        "cors.conf": "proxy_ssl_verify off;\nmore_set_headers 'Access-Control-Allow-Origin: $http_origin';\nmore_set_headers 'Access-Control-Allow-Credentials: true';\nmore_set_headers 'Access-Control-Allow-Headers: $http_access_control_request_headers';\nmore_set_headers 'Access-Control-Allow-Methods: $http_access_control_request_method';"
      },
      "kind": "ConfigMap",
      "metadata": {
        "name": "cors-conf"
      }
    },
    {
      "apiVersion": "v1",
      "kind": "Route",
      "metadata": {
        "labels": {
          "app": "apicast-staging"
        },
        "name": "api-apicast-staging-route"
      },
      "spec": {
        "host": "api-${TENANT_NAME}-apicast-staging.${WILDCARD_DOMAIN}",
        "port": {
          "targetPort": "gateway"
        },
        "tls": {
          "insecureEdgeTerminationPolicy": "Allow",
          "termination": "edge"
        },
        "to": {
          "kind": "Service",
          "name": "apicast-staging"
        }
      }
    },
    {
      "apiVersion": "v1",
      "kind": "Route",
      "metadata": {
        "labels": {
          "app": "apicast-production"
        },
        "name": "api-apicast-production-route"
      },
      "spec": {
        "host": "api-${TENANT_NAME}-apicast-production.${WILDCARD_DOMAIN}",
        "port": {
          "targetPort": "gateway"
        },
        "tls": {
          "insecureEdgeTerminationPolicy": "Allow",
          "termination": "edge"
        },
        "to": {
          "kind": "Service",
          "name": "apicast-production"
        }
      }
    },
    {
      "apiVersion": "v1",
      "kind": "DeploymentConfig",
      "metadata": {
        "name": "system-app"
      },
      "spec": {
        "replicas": 1,
        "selector": {
          "name": "system-app"
        },
        "strategy": {
          "rollingParams": {
            "intervalSeconds": 1,
            "maxSurge": "25%",
            "maxUnavailable": "25%",
            "post": {
              "execNewPod": {
                "command": [
                  "bash",
                  "-c",
                  "bundle exec rake boot openshift:post_deploy"
                ],
                "containerName": "system-provider"
              },
              "failurePolicy": "Abort"
            },
            "pre": {
              "execNewPod": {
                "command": [
                  "bash",
                  "-c",
                  "bundle exec rake boot openshift:deploy"
                ],
                "containerName": "system-provider",
                "env": [
                  {
                    "name": "RAILS_ENV",
                    "value": "production"
                  },
                  {
                    "name": "DATABASE_URL",
                    "value": "mysql2://root:${MYSQL_ROOT_PASSWORD}@system-mysql/${MYSQL_DATABASE}"
                  },
                  {
                    "name": "FORCE_SSL",
                    "value": "true"
                  },
                  {
                    "name": "THREESCALE_SUPERDOMAIN",
                    "value": "${WILDCARD_DOMAIN}"
                  },
                  {
                    "name": "TENANT_NAME",
                    "value": "${TENANT_NAME}"
                  },
                  {
                    "name": "APICAST_ACCESS_TOKEN",
                    "value": "${APICAST_ACCESS_TOKEN}"
                  },
                  {
                    "name": "ADMIN_ACCESS_TOKEN",
                    "value": "${ADMIN_ACCESS_TOKEN}"
                  },
                  {
                    "name": "PROVIDER_PLAN",
                    "value": "enterprise"
                  },
                  {
                    "name": "USER_LOGIN",
                    "value": "${ADMIN_USERNAME}"
                  },
                  {
                    "name": "USER_PASSWORD",
                    "value": "${ADMIN_PASSWORD}"
                  },
                  {
                    "name": "RAILS_LOG_TO_STDOUT",
                    "value": "true"
                  },
                  {
                    "name": "RAILS_LOG_LEVEL",
                    "value": "info"
                  },
                  {
                    "name": "THINKING_SPHINX_ADDRESS",
                    "value": "system-sphinx"
                  },
                  {
                    "name": "THINKING_SPHINX_PORT",
                    "value": "9306"
                  },
                  {
                    "name": "THINKING_SPHINX_CONFIGURATION_FILE",
                    "value": "/tmp/sphinx.conf"
                  },
                  {
                    "name": "EVENTS_SHARED_SECRET",
                    "value": "${SYSTEM_BACKEND_SHARED_SECRET}"
                  },
                  {
                    "name": "THREESCALE_SANDBOX_PROXY_OPENSSL_VERIFY_MODE",
                    "value": "VERIFY_NONE"
                  },
                  {
                    "name": "APICAST_BACKEND_ROOT_ENDPOINT",
                    "value": "https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}"
                  },
                  {
                    "name": "CONFIG_INTERNAL_API_USER",
                    "value": "${SYSTEM_BACKEND_USERNAME}"
                  },
                  {
                    "name": "CONFIG_INTERNAL_API_PASSWORD",
                    "value": "${SYSTEM_BACKEND_PASSWORD}"
                  },
                  {
                    "name": "SECRET_KEY_BASE",
                    "value": "${SYSTEM_APP_SECRET_KEY_BASE}"
                  },
                  {
                    "name": "AMP_RELEASE",
                    "value": "${AMP_RELEASE}"
                  },
                  {
                    "name": "SMTP_ADDRESS",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "address",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "SMTP_USER_NAME",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "username",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "SMTP_PASSWORD",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "password",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "SMTP_DOMAIN",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "domain",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "SMTP_PORT",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "port",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "SMTP_AUTHENTICATION",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "authentication",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "SMTP_OPENSSL_VERIFY_MODE",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "openssl.verify.mode",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "BACKEND_ROUTE",
                    "value": "https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}"
                  }
                ],
                "volumes": [
                  "system-storage"
                ]
              },
              "failurePolicy": "Retry"
            },
            "timeoutSeconds": 600,
            "updatePeriodSeconds": 1
          },
          "type": "Rolling"
        },
        "template": {
          "metadata": {
            "labels": {
              "name": "system-app"
            }
          },
          "spec": {
            "containers": [
              {
                "args": null,
                "command": [
                  "env",
                  "TENANT_MODE=provider",
                  "PORT=3000",
                  "container-entrypoint",
                  "bundle",
                  "exec",
                  "unicorn",
                  "-c",
                  "config/unicorn.rb"
                ],
                "env": [
                  {
                    "name": "RAILS_ENV",
                    "value": "production"
                  },
                  {
                    "name": "DATABASE_URL",
                    "value": "mysql2://root:${MYSQL_ROOT_PASSWORD}@system-mysql/${MYSQL_DATABASE}"
                  },
                  {
                    "name": "FORCE_SSL",
                    "value": "true"
                  },
                  {
                    "name": "THREESCALE_SUPERDOMAIN",
                    "value": "${WILDCARD_DOMAIN}"
                  },
                  {
                    "name": "TENANT_NAME",
                    "value": "${TENANT_NAME}"
                  },
                  {
                    "name": "APICAST_ACCESS_TOKEN",
                    "value": "${APICAST_ACCESS_TOKEN}"
                  },
                  {
                    "name": "ADMIN_ACCESS_TOKEN",
                    "value": "${ADMIN_ACCESS_TOKEN}"
                  },
                  {
                    "name": "PROVIDER_PLAN",
                    "value": "enterprise"
                  },
                  {
                    "name": "USER_LOGIN",
                    "value": "${ADMIN_USERNAME}"
                  },
                  {
                    "name": "USER_PASSWORD",
                    "value": "${ADMIN_PASSWORD}"
                  },
                  {
                    "name": "RAILS_LOG_TO_STDOUT",
                    "value": "true"
                  },
                  {
                    "name": "RAILS_LOG_LEVEL",
                    "value": "info"
                  },
                  {
                    "name": "THINKING_SPHINX_ADDRESS",
                    "value": "system-sphinx"
                  },
                  {
                    "name": "THINKING_SPHINX_PORT",
                    "value": "9306"
                  },
                  {
                    "name": "THINKING_SPHINX_CONFIGURATION_FILE",
                    "value": "/tmp/sphinx.conf"
                  },
                  {
                    "name": "EVENTS_SHARED_SECRET",
                    "value": "${SYSTEM_BACKEND_SHARED_SECRET}"
                  },
                  {
                    "name": "THREESCALE_SANDBOX_PROXY_OPENSSL_VERIFY_MODE",
                    "value": "VERIFY_NONE"
                  },
                  {
                    "name": "APICAST_BACKEND_ROOT_ENDPOINT",
                    "value": "https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}"
                  },
                  {
                    "name": "CONFIG_INTERNAL_API_USER",
                    "value": "${SYSTEM_BACKEND_USERNAME}"
                  },
                  {
                    "name": "CONFIG_INTERNAL_API_PASSWORD",
                    "value": "${SYSTEM_BACKEND_PASSWORD}"
                  },
                  {
                    "name": "SECRET_KEY_BASE",
                    "value": "${SYSTEM_APP_SECRET_KEY_BASE}"
                  },
                  {
                    "name": "AMP_RELEASE",
                    "value": "${AMP_RELEASE}"
                  },
                  {
                    "name": "SMTP_ADDRESS",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "address",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "SMTP_USER_NAME",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "username",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "SMTP_PASSWORD",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "password",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "SMTP_DOMAIN",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "domain",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "SMTP_PORT",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "port",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "SMTP_AUTHENTICATION",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "authentication",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "SMTP_OPENSSL_VERIFY_MODE",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "openssl.verify.mode",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "BACKEND_ROUTE",
                    "value": "https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}"
                  }
                ],
                "image": "registry.access.redhat.com/3scale-amp20/system:1.0-2",
                "imagePullPolicy": "IfNotPresent",
                "livenessProbe": {
                  "initialDelaySeconds": 20,
                  "periodSeconds": 10,
                  "tcpSocket": {
                    "port": "provider"
                  },
                  "timeoutSeconds": 10
                },
                "name": "system-provider",
                "ports": [
                  {
                    "containerPort": 3000,
                    "name": "provider",
                    "protocol": "TCP"
                  }
                ],
                "readinessProbe": {
                  "httpGet": {
                    "httpHeaders": [
                      {
                        "name": "X-Forwarded-Proto",
                        "value": "https"
                      }
                    ],
                    "path": "/check.txt",
                    "port": "provider",
                    "scheme": "HTTP"
                  },
                  "initialDelaySeconds": 30,
                  "periodSeconds": 30,
                  "timeoutSeconds": 10
                },
                "volumeMounts": [
                  {
                    "mountPath": "/opt/system/public/system",
                    "name": "system-storage"
                  }
                ]
              },
              {
                "args": null,
                "command": [
                  "env",
                  "TENANT_MODE=developer",
                  "PORT=3001",
                  "container-entrypoint",
                  "bundle",
                  "exec",
                  "unicorn",
                  "-c",
                  "config/unicorn.rb"
                ],
                "env": [
                  {
                    "name": "RAILS_ENV",
                    "value": "production"
                  },
                  {
                    "name": "DATABASE_URL",
                    "value": "mysql2://root:${MYSQL_ROOT_PASSWORD}@system-mysql/${MYSQL_DATABASE}"
                  },
                  {
                    "name": "FORCE_SSL",
                    "value": "true"
                  },
                  {
                    "name": "THREESCALE_SUPERDOMAIN",
                    "value": "${WILDCARD_DOMAIN}"
                  },
                  {
                    "name": "TENANT_NAME",
                    "value": "${TENANT_NAME}"
                  },
                  {
                    "name": "APICAST_ACCESS_TOKEN",
                    "value": "${APICAST_ACCESS_TOKEN}"
                  },
                  {
                    "name": "ADMIN_ACCESS_TOKEN",
                    "value": "${ADMIN_ACCESS_TOKEN}"
                  },
                  {
                    "name": "PROVIDER_PLAN",
                    "value": "enterprise"
                  },
                  {
                    "name": "USER_LOGIN",
                    "value": "${ADMIN_USERNAME}"
                  },
                  {
                    "name": "USER_PASSWORD",
                    "value": "${ADMIN_PASSWORD}"
                  },
                  {
                    "name": "RAILS_LOG_TO_STDOUT",
                    "value": "true"
                  },
                  {
                    "name": "RAILS_LOG_LEVEL",
                    "value": "info"
                  },
                  {
                    "name": "THINKING_SPHINX_ADDRESS",
                    "value": "system-sphinx"
                  },
                  {
                    "name": "THINKING_SPHINX_PORT",
                    "value": "9306"
                  },
                  {
                    "name": "THINKING_SPHINX_CONFIGURATION_FILE",
                    "value": "/tmp/sphinx.conf"
                  },
                  {
                    "name": "EVENTS_SHARED_SECRET",
                    "value": "${SYSTEM_BACKEND_SHARED_SECRET}"
                  },
                  {
                    "name": "THREESCALE_SANDBOX_PROXY_OPENSSL_VERIFY_MODE",
                    "value": "VERIFY_NONE"
                  },
                  {
                    "name": "APICAST_BACKEND_ROOT_ENDPOINT",
                    "value": "https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}"
                  },
                  {
                    "name": "CONFIG_INTERNAL_API_USER",
                    "value": "${SYSTEM_BACKEND_USERNAME}"
                  },
                  {
                    "name": "CONFIG_INTERNAL_API_PASSWORD",
                    "value": "${SYSTEM_BACKEND_PASSWORD}"
                  },
                  {
                    "name": "SECRET_KEY_BASE",
                    "value": "${SYSTEM_APP_SECRET_KEY_BASE}"
                  },
                  {
                    "name": "AMP_RELEASE",
                    "value": "${AMP_RELEASE}"
                  },
                  {
                    "name": "SMTP_ADDRESS",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "address",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "SMTP_USER_NAME",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "username",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "SMTP_PASSWORD",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "password",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "SMTP_DOMAIN",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "domain",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "SMTP_PORT",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "port",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "SMTP_AUTHENTICATION",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "authentication",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "SMTP_OPENSSL_VERIFY_MODE",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "openssl.verify.mode",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "BACKEND_ROUTE",
                    "value": "https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}"
                  }
                ],
                "image": "registry.access.redhat.com/3scale-amp20/system:1.0-2",
                "imagePullPolicy": "IfNotPresent",
                "livenessProbe": {
                  "initialDelaySeconds": 20,
                  "periodSeconds": 10,
                  "tcpSocket": {
                    "port": "developer"
                  },
                  "timeoutSeconds": 10
                },
                "name": "system-developer",
                "ports": [
                  {
                    "containerPort": 3001,
                    "name": "developer",
                    "protocol": "TCP"
                  }
                ],
                "readinessProbe": {
                  "httpGet": {
                    "httpHeaders": [
                      {
                        "name": "X-Forwarded-Proto",
                        "value": "https"
                      }
                    ],
                    "path": "/check.txt",
                    "port": "developer",
                    "scheme": "HTTP"
                  },
                  "initialDelaySeconds": 30,
                  "periodSeconds": 30,
                  "timeoutSeconds": 10
                },
                "volumeMounts": [
                  {
                    "mountPath": "/opt/system/public/system",
                    "name": "system-storage",
                    "readOnly": true
                  }
                ]
              }
            ],
            "volumes": [
              {
                "name": "system-storage",
                "persistentVolumeClaim": {
                  "claimName": "system-storage"
                }
              }
            ]
          }
        },
        "triggers": [
          {
            "type": "ConfigChange"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "DeploymentConfig",
      "metadata": {
        "name": "system-resque"
      },
      "spec": {
        "replicas": 1,
        "selector": {
          "name": "system-resque"
        },
        "strategy": {
          "rollingParams": {
            "intervalSeconds": 1,
            "maxSurge": "25%",
            "maxUnavailable": "25%",
            "timeoutSeconds": 600,
            "updatePeriodSeconds": 1
          },
          "type": "Rolling"
        },
        "template": {
          "metadata": {
            "labels": {
              "name": "system-resque"
            }
          },
          "spec": {
            "containers": [
              {
                "args": [
                  "rake",
                  "resque:work",
                  "QUEUE=*"
                ],
                "env": [
                  {
                    "name": "RAILS_ENV",
                    "value": "production"
                  },
                  {
                    "name": "DATABASE_URL",
                    "value": "mysql2://root:${MYSQL_ROOT_PASSWORD}@system-mysql/${MYSQL_DATABASE}"
                  },
                  {
                    "name": "FORCE_SSL",
                    "value": "true"
                  },
                  {
                    "name": "THREESCALE_SUPERDOMAIN",
                    "value": "${WILDCARD_DOMAIN}"
                  },
                  {
                    "name": "TENANT_NAME",
                    "value": "${TENANT_NAME}"
                  },
                  {
                    "name": "APICAST_ACCESS_TOKEN",
                    "value": "${APICAST_ACCESS_TOKEN}"
                  },
                  {
                    "name": "ADMIN_ACCESS_TOKEN",
                    "value": "${ADMIN_ACCESS_TOKEN}"
                  },
                  {
                    "name": "PROVIDER_PLAN",
                    "value": "enterprise"
                  },
                  {
                    "name": "USER_LOGIN",
                    "value": "${ADMIN_USERNAME}"
                  },
                  {
                    "name": "USER_PASSWORD",
                    "value": "${ADMIN_PASSWORD}"
                  },
                  {
                    "name": "RAILS_LOG_TO_STDOUT",
                    "value": "true"
                  },
                  {
                    "name": "RAILS_LOG_LEVEL",
                    "value": "info"
                  },
                  {
                    "name": "THINKING_SPHINX_ADDRESS",
                    "value": "system-sphinx"
                  },
                  {
                    "name": "THINKING_SPHINX_PORT",
                    "value": "9306"
                  },
                  {
                    "name": "THINKING_SPHINX_CONFIGURATION_FILE",
                    "value": "/tmp/sphinx.conf"
                  },
                  {
                    "name": "EVENTS_SHARED_SECRET",
                    "value": "${SYSTEM_BACKEND_SHARED_SECRET}"
                  },
                  {
                    "name": "THREESCALE_SANDBOX_PROXY_OPENSSL_VERIFY_MODE",
                    "value": "VERIFY_NONE"
                  },
                  {
                    "name": "APICAST_BACKEND_ROOT_ENDPOINT",
                    "value": "https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}"
                  },
                  {
                    "name": "CONFIG_INTERNAL_API_USER",
                    "value": "${SYSTEM_BACKEND_USERNAME}"
                  },
                  {
                    "name": "CONFIG_INTERNAL_API_PASSWORD",
                    "value": "${SYSTEM_BACKEND_PASSWORD}"
                  },
                  {
                    "name": "SECRET_KEY_BASE",
                    "value": "${SYSTEM_APP_SECRET_KEY_BASE}"
                  },
                  {
                    "name": "AMP_RELEASE",
                    "value": "${AMP_RELEASE}"
                  },
                  {
                    "name": "SMTP_ADDRESS",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "address",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "SMTP_USER_NAME",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "username",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "SMTP_PASSWORD",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "password",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "SMTP_DOMAIN",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "domain",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "SMTP_PORT",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "port",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "SMTP_AUTHENTICATION",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "authentication",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "SMTP_OPENSSL_VERIFY_MODE",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "openssl.verify.mode",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "BACKEND_ROUTE",
                    "value": "https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}"
                  }
                ],
                "image": "registry.access.redhat.com/3scale-amp20/system:1.0-2",
                "imagePullPolicy": "IfNotPresent",
                "name": "system-resque",
                "volumeMounts": [
                  {
                    "mountPath": "/opt/system/public/system",
                    "name": "system-storage"
                  }
                ]
              },
              {
                "args": [
                  "rake",
                  "resque:scheduler",
                  "QUEUE=*"
                ],
                "env": [
                  {
                    "name": "RAILS_ENV",
                    "value": "production"
                  },
                  {
                    "name": "DATABASE_URL",
                    "value": "mysql2://root:${MYSQL_ROOT_PASSWORD}@system-mysql/${MYSQL_DATABASE}"
                  },
                  {
                    "name": "FORCE_SSL",
                    "value": "true"
                  },
                  {
                    "name": "THREESCALE_SUPERDOMAIN",
                    "value": "${WILDCARD_DOMAIN}"
                  },
                  {
                    "name": "TENANT_NAME",
                    "value": "${TENANT_NAME}"
                  },
                  {
                    "name": "APICAST_ACCESS_TOKEN",
                    "value": "${APICAST_ACCESS_TOKEN}"
                  },
                  {
                    "name": "ADMIN_ACCESS_TOKEN",
                    "value": "${ADMIN_ACCESS_TOKEN}"
                  },
                  {
                    "name": "PROVIDER_PLAN",
                    "value": "enterprise"
                  },
                  {
                    "name": "USER_LOGIN",
                    "value": "${ADMIN_USERNAME}"
                  },
                  {
                    "name": "USER_PASSWORD",
                    "value": "${ADMIN_PASSWORD}"
                  },
                  {
                    "name": "RAILS_LOG_TO_STDOUT",
                    "value": "true"
                  },
                  {
                    "name": "RAILS_LOG_LEVEL",
                    "value": "info"
                  },
                  {
                    "name": "THINKING_SPHINX_ADDRESS",
                    "value": "system-sphinx"
                  },
                  {
                    "name": "THINKING_SPHINX_PORT",
                    "value": "9306"
                  },
                  {
                    "name": "THINKING_SPHINX_CONFIGURATION_FILE",
                    "value": "/tmp/sphinx.conf"
                  },
                  {
                    "name": "EVENTS_SHARED_SECRET",
                    "value": "${SYSTEM_BACKEND_SHARED_SECRET}"
                  },
                  {
                    "name": "THREESCALE_SANDBOX_PROXY_OPENSSL_VERIFY_MODE",
                    "value": "VERIFY_NONE"
                  },
                  {
                    "name": "APICAST_BACKEND_ROOT_ENDPOINT",
                    "value": "https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}"
                  },
                  {
                    "name": "CONFIG_INTERNAL_API_USER",
                    "value": "${SYSTEM_BACKEND_USERNAME}"
                  },
                  {
                    "name": "CONFIG_INTERNAL_API_PASSWORD",
                    "value": "${SYSTEM_BACKEND_PASSWORD}"
                  },
                  {
                    "name": "SECRET_KEY_BASE",
                    "value": "${SYSTEM_APP_SECRET_KEY_BASE}"
                  },
                  {
                    "name": "AMP_RELEASE",
                    "value": "${AMP_RELEASE}"
                  },
                  {
                    "name": "SMTP_ADDRESS",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "address",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "SMTP_USER_NAME",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "username",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "SMTP_PASSWORD",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "password",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "SMTP_DOMAIN",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "domain",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "SMTP_PORT",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "port",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "SMTP_AUTHENTICATION",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "authentication",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "SMTP_OPENSSL_VERIFY_MODE",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "openssl.verify.mode",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "BACKEND_ROUTE",
                    "value": "https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}"
                  }
                ],
                "image": "registry.access.redhat.com/3scale-amp20/system:1.0-2",
                "imagePullPolicy": "IfNotPresent",
                "name": "system-scheduler"
              }
            ],
            "volumes": [
              {
                "name": "system-storage",
                "persistentVolumeClaim": {
                  "claimName": "system-storage"
                }
              }
            ]
          }
        },
        "triggers": [
          {
            "type": "ConfigChange"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "DeploymentConfig",
      "metadata": {
        "name": "system-sidekiq"
      },
      "spec": {
        "replicas": 1,
        "selector": {
          "name": "system-sidekiq"
        },
        "strategy": {
          "rollingParams": {
            "intervalSeconds": 1,
            "maxSurge": "25%",
            "maxUnavailable": "25%",
            "timeoutSeconds": 600,
            "updatePeriodSeconds": 1
          },
          "type": "Rolling"
        },
        "template": {
          "metadata": {
            "labels": {
              "name": "system-sidekiq"
            }
          },
          "spec": {
            "containers": [
              {
                "args": [
                  "rake",
                  "sidekiq:worker"
                ],
                "env": [
                  {
                    "name": "RAILS_ENV",
                    "value": "production"
                  },
                  {
                    "name": "DATABASE_URL",
                    "value": "mysql2://root:${MYSQL_ROOT_PASSWORD}@system-mysql/${MYSQL_DATABASE}"
                  },
                  {
                    "name": "FORCE_SSL",
                    "value": "true"
                  },
                  {
                    "name": "THREESCALE_SUPERDOMAIN",
                    "value": "${WILDCARD_DOMAIN}"
                  },
                  {
                    "name": "TENANT_NAME",
                    "value": "${TENANT_NAME}"
                  },
                  {
                    "name": "APICAST_ACCESS_TOKEN",
                    "value": "${APICAST_ACCESS_TOKEN}"
                  },
                  {
                    "name": "ADMIN_ACCESS_TOKEN",
                    "value": "${ADMIN_ACCESS_TOKEN}"
                  },
                  {
                    "name": "PROVIDER_PLAN",
                    "value": "enterprise"
                  },
                  {
                    "name": "USER_LOGIN",
                    "value": "${ADMIN_USERNAME}"
                  },
                  {
                    "name": "USER_PASSWORD",
                    "value": "${ADMIN_PASSWORD}"
                  },
                  {
                    "name": "RAILS_LOG_TO_STDOUT",
                    "value": "true"
                  },
                  {
                    "name": "RAILS_LOG_LEVEL",
                    "value": "info"
                  },
                  {
                    "name": "THINKING_SPHINX_ADDRESS",
                    "value": "system-sphinx"
                  },
                  {
                    "name": "THINKING_SPHINX_PORT",
                    "value": "9306"
                  },
                  {
                    "name": "THINKING_SPHINX_CONFIGURATION_FILE",
                    "value": "/tmp/sphinx.conf"
                  },
                  {
                    "name": "EVENTS_SHARED_SECRET",
                    "value": "${SYSTEM_BACKEND_SHARED_SECRET}"
                  },
                  {
                    "name": "THREESCALE_SANDBOX_PROXY_OPENSSL_VERIFY_MODE",
                    "value": "VERIFY_NONE"
                  },
                  {
                    "name": "APICAST_BACKEND_ROOT_ENDPOINT",
                    "value": "https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}"
                  },
                  {
                    "name": "CONFIG_INTERNAL_API_USER",
                    "value": "${SYSTEM_BACKEND_USERNAME}"
                  },
                  {
                    "name": "CONFIG_INTERNAL_API_PASSWORD",
                    "value": "${SYSTEM_BACKEND_PASSWORD}"
                  },
                  {
                    "name": "SECRET_KEY_BASE",
                    "value": "${SYSTEM_APP_SECRET_KEY_BASE}"
                  },
                  {
                    "name": "AMP_RELEASE",
                    "value": "${AMP_RELEASE}"
                  },
                  {
                    "name": "SMTP_ADDRESS",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "address",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "SMTP_USER_NAME",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "username",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "SMTP_PASSWORD",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "password",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "SMTP_DOMAIN",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "domain",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "SMTP_PORT",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "port",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "SMTP_AUTHENTICATION",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "authentication",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "SMTP_OPENSSL_VERIFY_MODE",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "key": "openssl.verify.mode",
                        "name": "smtp"
                      }
                    }
                  },
                  {
                    "name": "BACKEND_ROUTE",
                    "value": "https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}"
                  }
                ],
                "image": "registry.access.redhat.com/3scale-amp20/system:1.0-2",
                "imagePullPolicy": "IfNotPresent",
                "name": "system-sidekiq",
                "volumeMounts": [
                  {
                    "mountPath": "/opt/system/public/system",
                    "name": "system-storage"
                  }
                ]
              }
            ],
            "volumes": [
              {
                "name": "system-storage",
                "persistentVolumeClaim": {
                  "claimName": "system-storage"
                }
              }
            ]
          }
        },
        "triggers": [
          {
            "type": "ConfigChange"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "DeploymentConfig",
      "metadata": {
        "name": "system-mysql"
      },
      "spec": {
        "replicas": 1,
        "selector": {
          "name": "system-mysql"
        },
        "strategy": {
          "type": "Recreate"
        },
        "template": {
          "metadata": {
            "labels": {
              "name": "system-mysql"
            }
          },
          "spec": {
            "containers": [
              {
                "env": [
                  {
                    "name": "MYSQL_USER",
                    "value": "${MYSQL_USER}"
                  },
                  {
                    "name": "MYSQL_PASSWORD",
                    "value": "${MYSQL_PASSWORD}"
                  },
                  {
                    "name": "MYSQL_DATABASE",
                    "value": "${MYSQL_DATABASE}"
                  },
                  {
                    "name": "MYSQL_ROOT_PASSWORD",
                    "value": "${MYSQL_ROOT_PASSWORD}"
                  },
                  {
                    "name": "MYSQL_LOWER_CASE_TABLE_NAMES",
                    "value": "1"
                  }
                ],
                "image": "${MYSQL_IMAGE}",
                "imagePullPolicy": "IfNotPresent",
                "livenessProbe": {
                  "initialDelaySeconds": 30,
                  "periodSeconds": 10,
                  "tcpSocket": {
                    "port": 3306
                  }
                },
                "name": "system-mysql",
                "ports": [
                  {
                    "containerPort": 3306,
                    "protocol": "TCP"
                  }
                ],
                "readinessProbe": {
                  "exec": {
                    "command": [
                      "/bin/sh",
                      "-i",
                      "-c",
                      "MYSQL_PWD=\"$MYSQL_PASSWORD\" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'"
                    ]
                  },
                  "initialDelaySeconds": 10,
                  "periodSeconds": 30,
                  "timeoutSeconds": 5
                },
                "resources": {
                  "limits": {
                    "memory": "2Gi"
                  },
                  "requests": {
                    "cpu": "1",
                    "memory": "1Gi"
                  }
                },
                "volumeMounts": [
                  {
                    "mountPath": "/var/lib/mysql/data",
                    "name": "mysql-storage"
                  }
                ]
              }
            ],
            "volumes": [
              {
                "name": "mysql-storage",
                "persistentVolumeClaim": {
                  "claimName": "mysql-storage"
                }
              }
            ]
          }
        },
        "triggers": [
          {
            "type": "ConfigChange"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "data": {
        "redis.conf": "protected-mode no\n\nport 6379\n\ntimeout 0\ntcp-keepalive 300\n\ndaemonize no\nsupervised no\n\nloglevel notice\n\ndatabases 16\n\nsave 900 1\nsave 300 10\nsave 60 10000\n\nstop-writes-on-bgsave-error yes\n\nrdbcompression yes\nrdbchecksum yes\n\ndbfilename dump.rdb\n\nslave-serve-stale-data yes\nslave-read-only yes\n\nrepl-diskless-sync no\nrepl-disable-tcp-nodelay no\n\nappendonly yes\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\n\nlua-time-limit 5000\n\nactiverehashing no\n\naof-rewrite-incremental-fsync yes\ndir /var/lib/redis/data\n"
      },
      "kind": "ConfigMap",
      "metadata": {
        "name": "redis-config"
      }
    },
    {
      "apiVersion": "v1",
      "data": {
        "address": "",
        "authentication": "",
        "domain": "",
        "openssl.verify.mode": "",
        "password": "",
        "port": "",
        "username": ""
      },
      "kind": "ConfigMap",
      "metadata": {
        "name": "smtp"
      }
    },
    {
      "apiVersion": "v1",
      "kind": "DeploymentConfig",
      "metadata": {
        "name": "apicast-router"
      },
      "spec": {
        "replicas": 1,
        "selector": {
          "deploymentconfig": "apicast-router"
        },
        "strategy": {
          "type": "Rolling"
        },
        "template": {
          "metadata": {
            "labels": {
              "deploymentconfig": "apicast-router"
            }
          },
          "spec": {
            "volumes": [
              {
                "name": "apicast-router-config",
                "configMap": {
                  "name": "apicast-router-config",
                  "items": [
                    {
                      "key": "router.conf",
                      "path": "router.conf"
                    }
                  ]
                }
              }
            ],
            "containers": [
              {
                "env": [
                  {
                    "name": "APICAST_CONFIGURATION_LOADER",
                    "value": "lazy"
                  },
                  {
                    "name": "APICAST_CONFIGURATION_CACHE",
                    "value": "0"
                  }
                ],
                "image": "3scale-amp20/apicast-gateway:1.0",
                "imagePullPolicy": "Always",
                "name": "apicast-router",
                "command": [
                  "bin/apicast"
                ],
                "livenessProbe": {
                  "tcpSocket": {
                    "port": "router"
                  },
                  "initialDelaySeconds": 5,
                  "timeoutSeconds": 5,
                  "periodSeconds": 10
                },
                "readinessProbe": {
                  "httpGet": {
                    "path": "/status/ready",
                    "port": "management"
                  },
                  "initialDelaySeconds": 5,
                  "timeoutSeconds": 5,
                  "periodSeconds": 30
                },
                "volumeMounts": [
                  {
                    "name": "apicast-router-config",
                    "mountPath": "/opt/app-root/src/sites.d/",
                    "readOnly": true
                  }
                ],
                "ports": [
                  {
                    "containerPort": 8082,
                    "name": "router",
                    "protocol": "TCP"
                  },
                  {
                    "containerPort": 8090,
                    "name": "management",
                    "protocol": "TCP"
                  }
                ]
              }
            ]
          }
        },
        "triggers": [
          {
            "type": "ConfigChange"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "Service",
      "metadata": {
        "name": "apicast-router"
      },
      "spec": {
        "ports": [
          {
            "name": "router",
            "port": 80,
            "protocol": "TCP",
            "targetPort": "router"
          }
        ],
        "selector": {
          "deploymentconfig": "apicast-router"
        }
      }
    },
    {
      "apiVersion": "v1",
      "kind": "ConfigMap",
      "metadata": {
        "name": "apicast-router-config"
      },
      "data": {
        "router.conf": "upstream wildcard {\n  server 0.0.0.1:1;\n\n  balancer_by_lua_block {\n    local round_robin = require 'resty.balancer.round_robin'\n    local balancer = round_robin.new()\n    local peers = balancer:peers(ngx.ctx.apicast)\n\n    local peer, err = balancer:set_peer(peers)\n\n    if not peer then\n      ngx.status = ngx.HTTP_SERVICE_UNAVAILABLE\n      ngx.log(ngx.ERR, \"failed to set current backend peer: \", err)\n      ngx.exit(ngx.status)\n    end\n  }\n\n  keepalive 1024;\n}\n\nserver {\n  listen 8082;\n  server_name ~-(?<apicast>apicast-(staging|production))\\.;\n  access_log /dev/stdout combined;\n\n  location / {\n    access_by_lua_block {\n      local resolver = require('resty.resolver'):instance()\n      local servers = resolver:get_servers(ngx.var.apicast, { port = 8080 })\n\n      if #servers == 0 then\n        ngx.status = ngx.HTTP_BAD_GATEWAY\n        ngx.exit(ngx.HTTP_OK)\n      end\n\n      ngx.ctx.apicast = servers\n    }\n    proxy_http_version 1.1;\n    proxy_pass $scheme://wildcard;\n    proxy_set_header Host $host;\n    proxy_set_header Connection \"\";\n  }\n}"
      }
    },
    {
    "kind": "ConfigMap",
    "apiVersion": "v1",
    "metadata": {
        "name": "apicast-jdg",
        "creationTimestamp": null
    },
    "data": {
        "apicast_jdg.lua": "local apicast = require('apicast').new()\nlocal _M = { _VERSION = '3.0.0', _NAME = 'APIcast with CORS' }\nlocal mt = { __index = setmetatable(_M, { __index = apicast }) }\nlocal http_ng = require \"resty.http_ng\"\nlocal env = require('resty.env')\n\nfunction table.val_to_str ( v )\n  if \"string\" == type( v ) then\n    v = string.gsub( v, \"\\n\", \"\\\\n\" )\n    if string.match( string.gsub(v,\"[^'\\\"]\",\"\"), '^\"+$' ) then\n      return v\n    end\n    return string.gsub(v,'\"', '' )\n  else\n    return \"table\" == type( v ) and table.tostring( v ) or\n      tostring( v )\n  end\nend\n\nfunction table.key_to_str ( k )\n  if \"string\" == type( k ) and string.match( k, \"^[_%a][_%a%d]*$\" ) then\n    return k\n  else\n    return table.val_to_str( k )\n  end\nend\n\nfunction table.tostring( tbl )\n  local result, done = {}, {}\n  for k, v in ipairs( tbl ) do\n    table.insert( result, table.val_to_str( v ) )\n    done[ k ] = true\n  end\n  for k, v in pairs( tbl ) do\n    if not done[ k ] then\n      table.insert( result,\n        --table.key_to_str( k ) .. \":\" .. table.val_to_str( v ) )\n         k .. \":\" .. table.val_to_str( v ) )\n    end\n  end\n  return table.concat( result, \",\" )\nend\nfunction _M.new()\n  return setmetatable({}, mt)\nend\n\nfunction getKey(orig_uri,host,method)\n     local new_req_uri, n, err = ngx.re.gsub(orig_uri, [[\\buser_key=[^\u0026]*\u0026?]],\"\", \"jo\")\n    -- ngx.log(ngx.INFO,'NEW_REQ_URI: ',new_req_uri)\n     if string.sub(new_req_uri,-1) =='?' then\n        new_req_uri=string.sub(new_req_uri, 1,( #new_req_uri - 1 ))\n     end\n    local key = method..'_'..host..new_req_uri\nreturn ngx.escape_uri(key)\nend\n\nfunction storeJDG(premature,jdg_key,data)\n    local http_client = http_ng.new()\n    http_client.post('http://'..env.get('APICAST_JDG_URL')..'/rest/default/'..jdg_key,  data,{headers= {['Content-Type']='application/text'}, {['timeToLiveSeconds']=10}})\nend\n\nfunction _M:body_filter()\n\n    local resp = ngx.arg[1]\n    if resp ~= \"\" and ngx.var.request_method == \"GET\" then\n      if ngx.ctx.jdghit == 0 then\n           local jdg_key= getKey(ngx.var.request_uri,ngx.var.http_host,ngx.var.request_method )\n           ngx.log(ngx.INFO,'JDG_MISS: ', jdg_key)\n           local headers = table.tostring(ngx.resp.get_headers(0,true)):gsub(\"\\\"\",\"\")\n           local respData = headers..\"\\n\"..resp\n           ngx.timer.at(0,storeJDG,jdg_key,respData)\n         end\n    end\n    return apicast:body_filter()\nend\nfunction _M:balancer()\n    if ngx.ctx.jdghit == 1 then\n        ngx.status = 200\n        return ngx.exit(ngx.status)\n    end\n    return apicast:balancer()\nend\n \n function _M:access()\n    if ngx.var.request_method == \"GET\" then\n        local jdg_key= getKey(ngx.var.request_uri,ngx.var.http_host,ngx.var.request_method )\n        local http_client = http_ng.new()\n        local res = http_client.get('http://'..env.get('APICAST_JDG_URL')..'/rest/default/'..jdg_key)\n        if res.status == 200 then\n            ngx.log(ngx.INFO,'JDG_HIT, key: ',jdg_key)\n            ngx.status = 200\n            local separatorIndex = res.body:find(\"\\n\")\n            local headers = string.sub(res.body,0,separatorIndex-1)\n            local body = string.sub(res.body,separatorIndex+1)\n            for header in (headers..\",\"):gmatch(\"(.-)\"..\",\") do\n                local sepIndex = header:find(\":\")\n                ngx.header[string.sub(header,0,sepIndex-1)] = string.sub(header,sepIndex+1)\n            end\n            ngx.header[\"JDG\"] = \"true\"\n            ngx.ctx.jdghit= 1\n            ngx.say(body)\n        else\n            ngx.ctx.jdghit= 0\n        end\n    end\n  return apicast:access()\n  end\n return _M"
    }
}
    ,
    {
      "apiVersion": "v1",
      "kind": "Route",
      "metadata": {
        "name": "apicast-wildcard-router",
        "labels": {
          "app": "apicast-wildcard-router"
        }
      },
      "spec": {
        "host": "apicast-${TENANT_NAME}.gateway.${WILDCARD_DOMAIN}",
        "to": {
          "kind": "Service",
          "name": "apicast-router"
        },
        "port": {
          "targetPort": "router"
        },
        "wildcardPolicy": "Subdomain",
        "tls": {
          "termination": "edge",
          "insecureEdgeTerminationPolicy": "Allow"
        }
      }
    }
  ],
  "parameters": [
    {
      "description": "AMP release tag.",
      "name": "AMP_RELEASE",
      "required": true,
      "value": "2.0.0-CR2-redhat-1"
    },
    {
      "from": "[a-z0-9]{8}",
      "generate": "expression",
      "name": "ADMIN_PASSWORD",
      "value": "admin",
      "required": true
    },
    {
      "name": "ADMIN_USERNAME",
      "required": true,
      "value": "admin"
    },
    {
      "description": "Read Only Access Token that is APIcast going to use to download its configuration.",
      "from": "[a-z0-9]{8}",
      "generate": "expression",
      "name": "APICAST_ACCESS_TOKEN",
      "required": true
    },
    {
      "description": "Admin Access Token with all scopes and write permissions for API access.",
      "from": "[a-z0-9]{16}",
      "generate": "expression",
      "name": "ADMIN_ACCESS_TOKEN",
      "required": false
    },
    {
      "description": "Root domain for the wildcard routes. Eg. example.com will generate 3scale-admin.example.com.",
      "name": "WILDCARD_DOMAIN",
      "required": true
    },
    {
      "description": "Tenant name under the root that Admin UI will be available with -admin suffix.",
      "name": "TENANT_NAME",
      "required": true,
      "value": "3scale"
    },
    {
      "description": "Username for MySQL user that will be used for accessing the database.",
      "displayName": "MySQL User",
      "name": "MYSQL_USER",
      "required": true,
      "value": "mysql"
    },
    {
      "description": "Password for the MySQL user.",
      "displayName": "MySQL Password",
      "from": "[a-z0-9]{8}",
      "generate": "expression",
      "name": "MYSQL_PASSWORD",
      "required": true
    },
    {
      "description": "Name of the MySQL database accessed.",
      "displayName": "MySQL Database Name",
      "name": "MYSQL_DATABASE",
      "required": true,
      "value": "system"
    },
    {
      "description": "Password for Root user.",
      "displayName": "MySQL Root password.",
      "from": "[a-z0-9]{8}",
      "generate": "expression",
      "name": "MYSQL_ROOT_PASSWORD",
      "required": true
    },
    {
      "description": "Internal 3scale API username for internal 3scale api auth.",
      "name": "SYSTEM_BACKEND_USERNAME",
      "required": true,
      "value": "3scale_api_user"
    },
    {
      "description": "Internal 3scale API password for internal 3scale api auth.",
      "from": "[a-z0-9]{8}",
      "generate": "expression",
      "name": "SYSTEM_BACKEND_PASSWORD",
      "required": true
    },
    {
      "description": "Redis image to use",
      "name": "REDIS_IMAGE",
      "required": true,
      "value": "registry.access.redhat.com/rhscl/redis-32-rhel7:3.2-5.7"
    },
    {
      "description": "Mysql image to use",
      "name": "MYSQL_IMAGE",
      "required": true,
      "value": "registry.access.redhat.com/rhscl/mysql-56-rhel7:5.6-13.14"
    },
    {
      "description": "Shared secret to import events from backend to system.",
      "from": "[a-z0-9]{8}",
      "generate": "expression",
      "name": "SYSTEM_BACKEND_SHARED_SECRET",
      "required": true
    },
    {
      "description": "System application secret key base",
      "from": "[a-f0-9]{128}",
      "generate": "expression",
      "name": "SYSTEM_APP_SECRET_KEY_BASE",
      "required": true
    },
    {
      "description": "Scope of the APIcast Management API. Can be disabled, status or debug. At least status required for health checks.",
      "name": "APICAST_MANAGEMENT_API",
      "required": false,
      "value": "status"
    },
    {
      "description": "Turn on/off the OpenSSL peer verification when downloading the configuration. Can be set to true/false.",
      "name": "APICAST_OPENSSL_VERIFY",
      "required": false,
      "value": "false"
    },
    {
      "description": "Enable logging response codes in APIcast.",
      "name": "APICAST_RESPONSE_CODES",
      "required": false,
      "value": "true"
    },
	{
            "displayName": "Application Name",
            "description": "The name for the application.",
            "name": "APPLICATION_NAME",
            "value": "datagrid-app",
            "required": true
        },
	{
            "displayName": "JGroups Cluster Password",
            "description": "JGroups cluster password",
            "name": "JGROUPS_CLUSTER_PASSWORD",
            "from": "[a-zA-Z0-9]{8}",
            "generate": "expression",
            "required": true
        },
  	{
            "displayName": "ImageStream Namespace",
            "description": "Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.",
            "name": "IMAGE_STREAM_NAMESPACE",
            "value": "openshift",
            "required": true
        },
{
            "displayName": "Custom http Route Hostname",
            "description": "Custom hostname for http service route.  Leave blank for default hostname, e.g.: <application-name>-<project>.<default-domain-suffix>",
            "name": "HOSTNAME_HTTP",
            "value": "",
            "required": false
        }
  ]
}
